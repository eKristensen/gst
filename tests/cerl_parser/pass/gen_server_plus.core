module 'gen_server_plus' ['behaviour_info'/1,
			  'call'/3,
			  'call'/4,
			  'handle_call'/3,
			  'handle_cast'/2,
			  'init'/1,
			  'module_info'/0,
			  'module_info'/1,
			  'start_link'/3]
    attributes [%% Line 1
		'file' =
		    %% Line 1
		    [{[116|[101|[115|[116|[115|[47|[99|[101|[114|[108|[95|[112|[97|[114|[115|[101|[114|[47|[112|[97|[115|[115|[47|[103|[101|[110|[95|[115|[101|[114|[118|[101|[114|[95|[112|[108|[117|[115|[46|[101|[114|[108]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]],1}],
		%% Line 2
		'behavior' =
		    %% Line 2
		    ['gen_server'],
		%% Line 36
		'type' =
		    %% Line 36
		    [{'from',{'type',{36,17},'tuple',[{'ann_type',{36,18},[{'var',{36,18},'Client'}|[{'type',{36,28},'pid',[]}]]}|[{'ann_type',{36,35},[{'var',{36,35},'Tag'}|[{'user_type',{36,42},'reply_tag',[]}]]}]]},[]}],
		%% Line 37
		'opaque' =
		    %% Line 37
		    [{'reply_tag',{'remote_type',{37,24},[{'atom',{37,24},'gen'}|[{'atom',{37,28},'reply_tag'}|[[]]]]},[]}],
		%% Line 41
		'record' =
		    %% Line 41
		    [{'plus_state',[{'record_field',{41,22},{'atom',{41,22},'callback'}}|[{'record_field',{41,32},{'atom',{41,32},'global'}}|[{'record_field',{41,40},{'atom',{41,40},'sessions'}}]]]}],
		%% Line 43
		'callback' =
		    %% Line 43
		    [{{'handle_plus_call',4},[{'type',{43,27},'fun',[{'type',{43,27},'product',[{'ann_type',{43,28},[{'var',{43,28},'Request'}|[{'type',{43,39},'term',[]}]]}|[{'ann_type',{43,47},[{'var',{43,47},'From'}|[{'user_type',{43,55},'from',[]}]]}|[{'ann_type',{44,23},[{'var',{44,23},'SessionState'}|[{'type',{44,39},'term',[]}]]}|[{'ann_type',{44,47},[{'var',{44,47},'GlobalState'}|[{'type',{44,62},'term',[]}]]}]]]]}|[{'type',{45,5},'union',[{'type',{45,5},'tuple',[{'atom',{45,6},'reply'}|[{'ann_type',{45,13},[{'var',{45,13},'Reply'}|[{'type',{45,22},'term',[]}]]}|[{'ann_type',{45,30},[{'var',{45,30},'NewSessionState'}|[{'type',{45,49},'term',[]}]]}|[{'ann_type',{45,57},[{'var',{45,57},'NewGlobalState'}|[{'type',{45,75},'term',[]}]]}]]]]}|[{'type',{46,5},'tuple',[{'atom',{46,6},'reply'}|[{'ann_type',{46,13},[{'var',{46,13},'Reply'}|[{'type',{46,22},'term',[]}]]}|[{'ann_type',{46,30},[{'var',{46,30},'NewSessionState'}|[{'type',{46,49},'term',[]}]]}|[{'ann_type',{46,57},[{'var',{46,57},'NewGlobalState'}|[{'type',{46,75},'term',[]}]]}|[{'type',{46,83},'union',[{'type',{46,83},'timeout',[]}|[{'atom',{46,95},'hibernate'}|[{'type',{46,107},'tuple',[{'atom',{46,108},'continue'}|[{'type',{46,118},'term',[]}]]}]]]}]]]]]}|[{'type',{47,5},'tuple',[{'atom',{47,6},'noreply'}|[{'ann_type',{47,15},[{'var',{47,15},'NewSessionState'}|[{'type',{47,34},'term',[]}]]}|[{'ann_type',{47,42},[{'var',{47,42},'NewGlobalState'}|[{'type',{47,60},'term',[]}]]}]]]}|[{'type',{48,5},'tuple',[{'atom',{48,6},'noreply'}|[{'ann_type',{48,15},[{'var',{48,15},'NewSessionState'}|[{'type',{48,34},'term',[]}]]}|[{'ann_type',{48,42},[{'var',{48,42},'NewGlobalState'}|[{'type',{48,60},'term',[]}]]}|[{'type',{48,68},'union',[{'type',{48,68},'timeout',[]}|[{'atom',{48,80},'hibernate'}|[{'type',{48,92},'tuple',[{'atom',{48,93},'continue'}|[{'type',{48,103},'term',[]}]]}]]]}]]]]}|[{'type',{49,5},'tuple',[{'atom',{49,6},'stop'}|[{'ann_type',{49,12},[{'var',{49,12},'Reason'}|[{'type',{49,22},'term',[]}]]}|[{'ann_type',{49,30},[{'var',{49,30},'Reply'}|[{'type',{49,39},'term',[]}]]}|[{'ann_type',{49,47},[{'var',{49,47},'NewSessionState'}|[{'type',{49,66},'term',[]}]]}|[{'ann_type',{49,74},[{'var',{49,74},'NewGlobalState'}|[{'type',{49,92},'term',[]}]]}]]]]]}|[{'type',{50,5},'tuple',[{'atom',{50,6},'stop'}|[{'ann_type',{50,12},[{'var',{50,12},'Reason'}|[{'type',{50,22},'term',[]}]]}|[{'ann_type',{50,30},[{'var',{50,30},'NewSessionState'}|[{'type',{50,49},'term',[]}]]}|[{'ann_type',{50,57},[{'var',{50,57},'NewGlobalState'}|[{'type',{50,75},'term',[]}]]}]]]]}]]]]]]}]]}]}],
		%% Line 51
		'callback' =
		    %% Line 51
		    [{{'handle_new_session_call',4},[{'type',{51,34},'fun',[{'type',{51,34},'product',[{'ann_type',{51,35},[{'var',{51,35},'Request'}|[{'type',{51,46},'term',[]}]]}|[{'ann_type',{51,54},[{'var',{51,54},'From'}|[{'user_type',{51,62},'from',[]}]]}|[{'ann_type',{52,23},[{'var',{52,23},'SessionState'}|[{'type',{52,39},'term',[]}]]}|[{'ann_type',{52,47},[{'var',{52,47},'GlobalState'}|[{'type',{52,62},'term',[]}]]}]]]]}|[{'type',{53,5},'union',[{'type',{53,5},'tuple',[{'atom',{53,6},'reply'}|[{'ann_type',{53,13},[{'var',{53,13},'Reply'}|[{'type',{53,22},'term',[]}]]}|[{'ann_type',{53,30},[{'var',{53,30},'NewSessionState'}|[{'type',{53,49},'term',[]}]]}|[{'ann_type',{53,57},[{'var',{53,57},'NewGlobalState'}|[{'type',{53,75},'term',[]}]]}]]]]}|[{'type',{54,5},'tuple',[{'atom',{54,6},'reply'}|[{'ann_type',{54,13},[{'var',{54,13},'Reply'}|[{'type',{54,22},'term',[]}]]}|[{'ann_type',{54,30},[{'var',{54,30},'NewSessionState'}|[{'type',{54,49},'term',[]}]]}|[{'ann_type',{54,57},[{'var',{54,57},'NewGlobalState'}|[{'type',{54,75},'term',[]}]]}|[{'type',{54,83},'union',[{'type',{54,83},'timeout',[]}|[{'atom',{54,95},'hibernate'}|[{'type',{54,107},'tuple',[{'atom',{54,108},'continue'}|[{'type',{54,118},'term',[]}]]}]]]}]]]]]}|[{'type',{55,5},'tuple',[{'atom',{55,6},'noreply'}|[{'ann_type',{55,15},[{'var',{55,15},'NewSessionState'}|[{'type',{55,34},'term',[]}]]}|[{'ann_type',{55,42},[{'var',{55,42},'NewGlobalState'}|[{'type',{55,60},'term',[]}]]}]]]}|[{'type',{56,5},'tuple',[{'atom',{56,6},'noreply'}|[{'ann_type',{56,15},[{'var',{56,15},'NewSessionState'}|[{'type',{56,34},'term',[]}]]}|[{'ann_type',{56,42},[{'var',{56,42},'NewGlobalState'}|[{'type',{56,60},'term',[]}]]}|[{'type',{56,68},'union',[{'type',{56,68},'timeout',[]}|[{'atom',{56,80},'hibernate'}|[{'type',{56,92},'tuple',[{'atom',{56,93},'continue'}|[{'type',{56,103},'term',[]}]]}]]]}]]]]}|[{'type',{57,5},'tuple',[{'atom',{57,6},'stop'}|[{'ann_type',{57,12},[{'var',{57,12},'Reason'}|[{'type',{57,22},'term',[]}]]}|[{'ann_type',{57,30},[{'var',{57,30},'Reply'}|[{'type',{57,39},'term',[]}]]}|[{'ann_type',{57,47},[{'var',{57,47},'NewSessionState'}|[{'type',{57,66},'term',[]}]]}|[{'ann_type',{57,74},[{'var',{57,74},'NewGlobalState'}|[{'type',{57,92},'term',[]}]]}]]]]]}|[{'type',{58,5},'tuple',[{'atom',{58,6},'stop'}|[{'ann_type',{58,12},[{'var',{58,12},'Reason'}|[{'type',{58,22},'term',[]}]]}|[{'ann_type',{58,30},[{'var',{58,30},'NewSessionState'}|[{'type',{58,49},'term',[]}]]}|[{'ann_type',{58,57},[{'var',{58,57},'NewGlobalState'}|[{'type',{58,75},'term',[]}]]}]]]]}]]]]]]}]]}]}],
		%% Line 59
		'callback' =
		    %% Line 59
		    [{{'handle_plus_cast',3},[{'type',{59,27},'fun',[{'type',{59,27},'product',[{'ann_type',{59,28},[{'var',{59,28},'Request'}|[{'type',{59,39},'term',[]}]]}|[{'ann_type',{59,47},[{'var',{59,47},'SessionState'}|[{'type',{59,63},'term',[]}]]}|[{'ann_type',{59,71},[{'var',{59,71},'GlobalState'}|[{'type',{59,86},'term',[]}]]}]]]}|[{'type',{60,5},'union',[{'type',{60,5},'tuple',[{'atom',{60,6},'noreply'}|[{'ann_type',{60,15},[{'var',{60,15},'NewSessionState'}|[{'type',{60,34},'term',[]}]]}|[{'ann_type',{60,42},[{'var',{60,42},'NewGlobalState'}|[{'type',{60,60},'term',[]}]]}]]]}|[{'type',{61,5},'tuple',[{'atom',{61,6},'noreply'}|[{'ann_type',{61,15},[{'var',{61,15},'NewSessionState'}|[{'type',{61,34},'term',[]}]]}|[{'ann_type',{61,42},[{'var',{61,42},'NewGlobalState'}|[{'type',{61,60},'term',[]}]]}|[{'type',{61,68},'union',[{'type',{61,68},'timeout',[]}|[{'atom',{61,80},'hibernate'}|[{'type',{61,92},'tuple',[{'atom',{61,93},'continue'}|[{'type',{61,103},'term',[]}]]}]]]}]]]]}|[{'type',{62,5},'tuple',[{'atom',{62,6},'stop'}|[{'ann_type',{62,12},[{'var',{62,12},'Reason'}|[{'type',{62,22},'term',[]}]]}|[{'ann_type',{62,30},[{'var',{62,30},'NewSessionState'}|[{'type',{62,49},'term',[]}]]}|[{'ann_type',{62,57},[{'var',{62,57},'NewGlobalState'}|[{'type',{62,75},'term',[]}]]}]]]]}]]]}]]}]}],
		%% Line 63
		'callback' =
		    %% Line 63
		    [{{'handle_new_session_cast',3},[{'type',{63,34},'fun',[{'type',{63,34},'product',[{'ann_type',{63,35},[{'var',{63,35},'Request'}|[{'type',{63,46},'term',[]}]]}|[{'ann_type',{63,54},[{'var',{63,54},'SessionState'}|[{'type',{63,70},'term',[]}]]}|[{'ann_type',{63,78},[{'var',{63,78},'GlobalState'}|[{'type',{63,93},'term',[]}]]}]]]}|[{'type',{64,5},'union',[{'type',{64,5},'tuple',[{'atom',{64,6},'noreply'}|[{'ann_type',{64,15},[{'var',{64,15},'NewSessionState'}|[{'type',{64,34},'term',[]}]]}|[{'ann_type',{64,42},[{'var',{64,42},'NewGlobalState'}|[{'type',{64,60},'term',[]}]]}]]]}|[{'type',{65,5},'tuple',[{'atom',{65,6},'noreply'}|[{'ann_type',{65,15},[{'var',{65,15},'NewSessionState'}|[{'type',{65,34},'term',[]}]]}|[{'ann_type',{65,42},[{'var',{65,42},'NewGlobalState'}|[{'type',{65,60},'term',[]}]]}|[{'type',{65,68},'union',[{'type',{65,68},'timeout',[]}|[{'atom',{65,80},'hibernate'}|[{'type',{65,92},'tuple',[{'atom',{65,93},'continue'}|[{'type',{65,103},'term',[]}]]}]]]}]]]]}|[{'type',{66,5},'tuple',[{'atom',{66,6},'stop'}|[{'ann_type',{66,12},[{'var',{66,12},'Reason'}|[{'type',{66,22},'term',[]}]]}|[{'ann_type',{66,30},[{'var',{66,30},'NewSessionState'}|[{'type',{66,49},'term',[]}]]}|[{'ann_type',{66,57},[{'var',{66,57},'NewGlobalState'}|[{'type',{66,75},'term',[]}]]}]]]]}]]]}]]}]}]]
'start_link'/3 =
    %% Line 71
    ( fun (_0,_1,_2) ->
	  %% Line 73
	  call 'gen_server':'start_link'
	      ('gen_server_plus', _0, [])
      -| [{'function',{'start_link',3}}] )
'init'/1 =
    %% Line 76
    ( fun (_0) ->
	  %% Line 77
	  {'ok',{'plus_state',( _0
				-| [{'function',{'init',1}}] ),'undefined',~{}~}}
      -| [{'function',{'init',1}}] )
'handle_call'/3 =
    %% Line 80
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <{'$gen_plus_call',SessionID,Payload},From,State>
		  when call 'erlang':'is_reference'
			(SessionID) ->
		  do  %% Line 81
		      call 'io':'format'
			  ([68|[69|[66|[85|[71|[58|[32|[71|[101|[110|[80|[108|[117|[115|[46|[32|[83|[101|[115|[115|[105|[111|[110|[32|[67|[97|[108|[108|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		      let <_4> =
			  case %% Line 83
			       State of
			    %% Line 83
			    ( <( {'plus_state',_34,_35,_rec0}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec0
			      -| ['compiler_generated'] )
			    %% Line 83
			    ( <_rec0> when 'true' ->
				  ( primop 'match_fail'
					(( {( 'badrecord'
					      -| ['compiler_generated'] ),_rec0}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  let <_66,Action,Msg,UpdatedGlobalState,UpdatedSessionState> =
			      case %% Line 83
				   call 'maps':'find'
				       (SessionID, _4) of
				%% Line 84
				<{'ok',SessionState}> when 'true' ->
				    let <_8> =
					case %% Line 87
					     State of
					  %% Line 87
					  ( <( {'plus_state',_rec1,_36,_37}
					       -| ['compiler_generated'] )> when 'true' ->
						_rec1
					    -| ['compiler_generated'] )
					  %% Line 87
					  ( <_rec1> when 'true' ->
						( primop 'match_fail'
						      (( {( 'badrecord'
							    -| ['compiler_generated'] ),_rec1}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  let <_6> =
					    case %% Line 87
						 State of
					      %% Line 87
					      ( <( {'plus_state',_38,_rec2,_39}
						   -| ['compiler_generated'] )> when 'true' ->
						    _rec2
						-| ['compiler_generated'] )
					      %% Line 87
					      ( <_rec2> when 'true' ->
						    ( primop 'match_fail'
							  (( {( 'badrecord'
								-| ['compiler_generated'] ),_rec2}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  let <_40> =
						call %% Line 87
						     _8:%% Line 87
							'handle_plus_call'
						    (%% Line 87
						     Payload, %% Line 87
							      From, %% Line 87
								    SessionState, %% Line 87
										  _6)
					    in  %% Line 86
						let <_62,Action,Msg,UpdatedGlobalState,UpdatedSessionState> =
						    case %% Line 87
							 _40 of
						      <{Action,Msg,UpdatedSessionState,UpdatedGlobalState}> when 'true' ->
							  %% Line 87
							  ( <( _40
							       -| ['compiler_generated'] ),Action,Msg,UpdatedGlobalState,UpdatedSessionState>
							    -| ['compiler_generated'] )
						      ( <_9> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_9})
							-| ['compiler_generated'] )
						    end
						in  <_62,Action,Msg,UpdatedGlobalState,UpdatedSessionState>
				%% Line 88
				<_X_NoSession> when 'true' ->
				    let <_13> =
					case %% Line 91
					     State of
					  %% Line 91
					  ( <( {'plus_state',_rec3,_41,_42}
					       -| ['compiler_generated'] )> when 'true' ->
						_rec3
					    -| ['compiler_generated'] )
					  %% Line 91
					  ( <_rec3> when 'true' ->
						( primop 'match_fail'
						      (( {( 'badrecord'
							    -| ['compiler_generated'] ),_rec3}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  let <_11> =
					    case %% Line 91
						 State of
					      %% Line 91
					      ( <( {'plus_state',_43,_rec4,_44}
						   -| ['compiler_generated'] )> when 'true' ->
						    _rec4
						-| ['compiler_generated'] )
					      %% Line 91
					      ( <_rec4> when 'true' ->
						    ( primop 'match_fail'
							  (( {( 'badrecord'
								-| ['compiler_generated'] ),_rec4}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  let <_45> =
						call %% Line 91
						     _13:%% Line 91
							 'handle_new_session_call'
						    (%% Line 91
						     Payload, %% Line 91
							      From, %% Line 91
								    _11)
					    in  %% Line 90
						let <_64,Action,Msg,UpdatedGlobalState,UpdatedSessionState> =
						    case %% Line 91
							 _45 of
						      <{Action,Msg,UpdatedSessionState,UpdatedGlobalState}> when 'true' ->
							  %% Line 91
							  ( <( _45
							       -| ['compiler_generated'] ),Action,Msg,UpdatedGlobalState,UpdatedSessionState>
							    -| ['compiler_generated'] )
						      ( <_14> when 'true' ->
							    primop 'match_fail'
								({'badmatch',_14})
							-| ['compiler_generated'] )
						    end
						in  <_64,Action,Msg,UpdatedGlobalState,UpdatedSessionState>
			      end
			  in  let <_17> =
				  case %% Line 94
				       State of
				    %% Line 94
				    ( <( {'plus_state',_46,_47,_rec5}
					 -| ['compiler_generated'] )> when 'true' ->
					  _rec5
				      -| ['compiler_generated'] )
				    %% Line 94
				    ( <_rec5> when 'true' ->
					  ( primop 'match_fail'
						(( {( 'badrecord'
						      -| ['compiler_generated'] ),_rec5}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  let <UpdatedSessions> =
				      call %% Line 94
					   'maps':%% Line 94
						  'put'
					  (%% Line 94
					   SessionID, %% Line 94
						      UpdatedSessionState, %% Line 94
									   _17)
				  in  let <_22> =
					  case %% Line 96
					       State of
					    %% Line 96
					    <{'plus_state',_48,_49,_50}> when 'true' ->
						let <_20> =
						    call 'erlang':'setelement'
							(4, State, UpdatedSessions)
						in  call 'erlang':'setelement'
							(3, _20, UpdatedGlobalState)
					    %% Line 96
					    ( <( _51
						 -| ['compiler_generated'] )> when 'true' ->
						  ( primop 'match_fail'
							(( {( 'badrecord'
							      -| ['compiler_generated'] ),State}
							   -| ['compiler_generated'] ))
						    -| ['compiler_generated'] )
					      -| ['compiler_generated'] )
					  end
				      in  %% Line 96
					  {Action,Msg,_22}
	      %% Line 99
	      <Payload,From,State> when 'true' ->
		  do  %% Line 100
		      call 'io':'format'
			  ([68|[69|[66|[85|[71|[58|[32|[71|[101|[110|[80|[108|[117|[115|[46|[32|[79|[116|[104|[101|[114|[32|[67|[97|[108|[108|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		      let <_26> =
			  case %% Line 102
			       State of
			    %% Line 102
			    ( <( {'plus_state',_rec7,_52,_53}
				 -| ['compiler_generated'] )> when 'true' ->
				  _rec7
			      -| ['compiler_generated'] )
			    %% Line 102
			    ( <_rec7> when 'true' ->
				  ( primop 'match_fail'
					(( {( 'badrecord'
					      -| ['compiler_generated'] ),_rec7}
					   -| ['compiler_generated'] ))
				    -| ['compiler_generated'] )
			      -| ['compiler_generated'] )
			  end
		      in  let <_24> =
			      case %% Line 102
				   State of
				%% Line 102
				( <( {'plus_state',_54,_rec8,_55}
				     -| ['compiler_generated'] )> when 'true' ->
				      _rec8
				  -| ['compiler_generated'] )
				%% Line 102
				( <_rec8> when 'true' ->
				      ( primop 'match_fail'
					    (( {( 'badrecord'
						  -| ['compiler_generated'] ),_rec8}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 101
			      case %% Line 102
				   call _26:'handle_plus_call'
				       (Payload, From, 'other', _24) of
				<{Action,Msg,_56,UpdatedGlobalState}> when 'true' ->
				    let <_30> =
					case %% Line 103
					     State of
					  %% Line 103
					  <{'plus_state',_57,_58,_59}> when 'true' ->
					      call 'erlang':'setelement'
						  (3, State, UpdatedGlobalState)
					  %% Line 103
					  ( <( _60
					       -| ['compiler_generated'] )> when 'true' ->
						( primop 'match_fail'
						      (( {( 'badrecord'
							    -| ['compiler_generated'] ),State}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  %% Line 103
					{Action,Msg,_30}
				( <_27> when 'true' ->
				      primop 'match_fail'
					  ({'badmatch',_27})
				  -| ['compiler_generated'] )
			      end
	    end
	    -| [{'function',{'handle_call',3}}] )
      -| [{'function',{'handle_call',3}}] )
'handle_cast'/2 =
    %% Line 106
    ( fun (_0,_1) ->
	  ( case <_0,_1> of
	      <{'$gen_plus_call',SessionID,Payload},State> when 'true' ->
		  do  %% Line 107
		      call 'io':'format'
			  ([68|[69|[66|[85|[71|[58|[32|[71|[101|[110|[80|[108|[117|[115|[46|[32|[83|[101|[115|[115|[105|[111|[110|[32|[67|[97|[115|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		      do  %% Line 108
			  call 'io':'format'
			      ([84|[79|[68|[79|[58|[32|[71|[101|[110|[80|[108|[117|[115|[32|[104|[97|[110|[100|[108|[101|[95|[99|[97|[115|[116|[58|[32|[73|[109|[112|[108|[101|[109|[101|[110|[116|[97|[116|[105|[111|[110|[32|[110|[111|[116|[32|[102|[105|[110|[105|[115|[104|[101|[100|[33|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  let <_3> =
			      case %% Line 110
				   State of
				%% Line 110
				( <( {'plus_state',_19,_20,_rec10}
				     -| ['compiler_generated'] )> when 'true' ->
				      _rec10
				  -| ['compiler_generated'] )
				%% Line 110
				( <_rec10> when 'true' ->
				      ( primop 'match_fail'
					    (( {( 'badrecord'
						  -| ['compiler_generated'] ),_rec10}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  %% Line 110
			      case call 'maps':'find'
				       (SessionID, _3) of
				%% Line 111
				<{'ok',SessionState}> when 'true' ->
				    let <_7> =
					case %% Line 114
					     State of
					  %% Line 114
					  ( <( {'plus_state',_rec11,_21,_22}
					       -| ['compiler_generated'] )> when 'true' ->
						_rec11
					    -| ['compiler_generated'] )
					  %% Line 114
					  ( <_rec11> when 'true' ->
						( primop 'match_fail'
						      (( {( 'badrecord'
							    -| ['compiler_generated'] ),_rec11}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  let <_5> =
					    case %% Line 114
						 State of
					      %% Line 114
					      ( <( {'plus_state',_23,_rec12,_24}
						   -| ['compiler_generated'] )> when 'true' ->
						    _rec12
						-| ['compiler_generated'] )
					      %% Line 114
					      ( <_rec12> when 'true' ->
						    ( primop 'match_fail'
							  (( {( 'badrecord'
								-| ['compiler_generated'] ),_rec12}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  %% Line 114
					    call _7:'handle_plus_cast'
						(Payload, SessionState, _5)
				%% Line 115
				<_X_NoSession> when 'true' ->
				    let <_11> =
					case %% Line 118
					     State of
					  %% Line 118
					  ( <( {'plus_state',_rec13,_25,_26}
					       -| ['compiler_generated'] )> when 'true' ->
						_rec13
					    -| ['compiler_generated'] )
					  %% Line 118
					  ( <_rec13> when 'true' ->
						( primop 'match_fail'
						      (( {( 'badrecord'
							    -| ['compiler_generated'] ),_rec13}
							 -| ['compiler_generated'] ))
						  -| ['compiler_generated'] )
					    -| ['compiler_generated'] )
					end
				    in  let <_9> =
					    case %% Line 118
						 State of
					      %% Line 118
					      ( <( {'plus_state',_27,_rec14,_28}
						   -| ['compiler_generated'] )> when 'true' ->
						    _rec14
						-| ['compiler_generated'] )
					      %% Line 118
					      ( <_rec14> when 'true' ->
						    ( primop 'match_fail'
							  (( {( 'badrecord'
								-| ['compiler_generated'] ),_rec14}
							     -| ['compiler_generated'] ))
						      -| ['compiler_generated'] )
						-| ['compiler_generated'] )
					    end
					in  %% Line 118
					    call _11:'handle_new_session_cast'
						(Payload, _9)
			      end
	      %% Line 122
	      <Payload,State> when 'true' ->
		  do  %% Line 123
		      call 'io':'format'
			  ([68|[69|[66|[85|[71|[58|[32|[71|[101|[110|[80|[108|[117|[115|[46|[32|[79|[116|[104|[101|[114|[32|[67|[97|[115|[116|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]])
		      do  %% Line 124
			  call 'io':'format'
			      ([84|[79|[68|[79|[58|[32|[71|[101|[110|[80|[108|[117|[115|[32|[104|[97|[110|[100|[108|[101|[95|[99|[97|[115|[116|[58|[32|[73|[109|[112|[108|[101|[109|[101|[110|[116|[97|[116|[105|[111|[110|[32|[110|[111|[116|[32|[102|[105|[110|[105|[115|[104|[101|[100|[33|[126|[110]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]])
			  let <_16> =
			      case %% Line 125
				   State of
				%% Line 125
				( <( {'plus_state',_rec15,_29,_30}
				     -| ['compiler_generated'] )> when 'true' ->
				      _rec15
				  -| ['compiler_generated'] )
				%% Line 125
				( <_rec15> when 'true' ->
				      ( primop 'match_fail'
					    (( {( 'badrecord'
						  -| ['compiler_generated'] ),_rec15}
					       -| ['compiler_generated'] ))
					-| ['compiler_generated'] )
				  -| ['compiler_generated'] )
			      end
			  in  let <_14> =
				  case %% Line 125
				       State of
				    %% Line 125
				    ( <( {'plus_state',_31,_rec16,_32}
					 -| ['compiler_generated'] )> when 'true' ->
					  _rec16
				      -| ['compiler_generated'] )
				    %% Line 125
				    ( <_rec16> when 'true' ->
					  ( primop 'match_fail'
						(( {( 'badrecord'
						      -| ['compiler_generated'] ),_rec16}
						   -| ['compiler_generated'] ))
					    -| ['compiler_generated'] )
				      -| ['compiler_generated'] )
				  end
			      in  %% Line 125
				  call _16:'handle_plus_cast'
				      (Payload, 'other', _14)
	    end
	    -| [{'function',{'handle_cast',2}}] )
      -| [{'function',{'handle_cast',2}}] )
'call'/3 =
    %% Line 130
    ( fun (_0,_1,_2) ->
	  ( case <_0,_1,_2> of
	      <ServerPid,'new',Request>
		  when call 'erlang':'is_pid'
			(ServerPid) ->
		  let <FreshSessionID> =
		      call %% Line 131
			   'erlang':%% Line 131
				    'make_ref'
			  ()
		  in  let <_4> =
			  call %% Line 133
			       'gen_server':%% Line 133
					    'call'
			      (%% Line 133
			       ServerPid, %% Line 133
					  {'$gen_plus_call',FreshSessionID,Request})
		      in  %% Line 132
			  {FreshSessionID,%% Line 133
					  _4}
	      %% Line 135
	      <ServerPid,SessionID,Request>
		  when let <_5> =
			call 'erlang':'is_pid'
			    (ServerPid)
		    in  let <_6> =
			    call 'erlang':'is_reference'
				(SessionID)
			in  call 'erlang':'and'
				(_5, _6) ->
		  let <_7> =
		      call %% Line 137
			   'gen_server':%% Line 137
					'call'
			  (%% Line 137
			   ServerPid, %% Line 137
				      {'$gen_plus_call',SessionID,Request})
		  in  %% Line 136
		      {SessionID,%% Line 137
				 _7}
	      ( <_10,_9,_8> when 'true' ->
		    ( primop 'match_fail'
			  (( {'function_clause',_10,_9,_8}
			     -| [{'function',{'call',3}}] ))
		      -| [{'function',{'call',3}}] )
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'call',3}}] )
      -| [{'function',{'call',3}}] )
'call'/4 =
    %% Line 141
    ( fun (_0,_1,_2,_3) ->
	  %% Line 142
	  call 'gen_server':'call'
	      (_0, {'$gen_plus_call',_1,_2}, _3)
      -| [{'function',{'call',4}}] )
'behaviour_info'/1 =
    ( fun (_0) ->
	  ( case ( _0
		   -| [{'function',{'behaviour_info',1}}] ) of
	      <'callbacks'> when 'true' ->
		  [{'handle_plus_call',4}|[{'handle_new_session_call',4}|[{'handle_plus_cast',3}|[{'handle_new_session_cast',3}]]]]
	      <'optional_callbacks'> when 'true' ->
		  []
	      ( <_1> when 'true' ->
		    ( primop 'match_fail'
			  (( {'function_clause',_1}
			     -| [{'function',{'behaviour_info',1}}] ))
		      -| [{'function',{'behaviour_info',1}}] )
		-| ['compiler_generated'] )
	    end
	    -| [{'function',{'behaviour_info',1}}] )
      -| [{'function',{'behaviour_info',1}}] )
'module_info'/0 =
    ( fun () ->
	  call 'erlang':'get_module_info'
	      ('gen_server_plus')
      -| [{'function',{'module_info',0}}] )
'module_info'/1 =
    ( fun (_0) ->
	  call 'erlang':'get_module_info'
	      ('gen_server_plus', ( _0
				    -| [{'function',{'module_info',1}}] ))
      -| [{'function',{'module_info',1}}] )
end